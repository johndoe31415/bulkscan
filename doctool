#!/usr/bin/python3
#	bulkscan - Document scanning and maintenance solution
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of bulkscan.
#
#	bulkscan is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	bulkscan is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with bulkscan; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import doclib
import json
import collections
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser()
parser.add_argument("-d", "--dump-data", action = "store_true", help = "Dump data of the document.")
parser.add_argument("--extract-autocomplete", action = "store_true", help = "Extract metadata from files and output autocomplete JSON file.")
parser.add_argument("-v", "--verbose", action = "store_true", help = "Be verbose about what is performed.")
parser.add_argument("files", metavar = "filename", type = str, nargs = "+", help = "Filename of the MUD(s).")
args = parser.parse_args(sys.argv[1:])

used_tags = set()
docnames_by_peer = collections.defaultdict(set)
for filename in args.files:
	with doclib.MultiDoc(filename) as doc:
		used_tags |= doc.tags
		if doc.peer is not None:
			docnames_by_peer[doc.peer]
		if (doc.peer is not None) and (doc.docname is not None):
			docnames_by_peer[doc.peer].add(doc.docname)
		
		if args.dump_data:
			print("%s: %d pages" % (filename, doc.pagecnt))
			for (key, value) in sorted(doc.get_document_properties().items()):
				print("    %-8s: %s" % (key, value))
			if len(doc.tags) > 0:
				print("    %-8s: %s" % ("tags", ", ".join(sorted(doc.tags))))
			print()

if args.extract_autocomplete:
	autocomplete = {
		"tag":				sorted(used_tags),
		"docname_by_peer":	{ key: sorted(value) for (key, value) in docnames_by_peer.items() },
	}
	print(json.dumps(autocomplete, sort_keys = True, indent = 4))
